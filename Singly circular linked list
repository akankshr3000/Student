# Singly circular linked list

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class CircularLinkedList:
    def __init__(self):
        self.last = None  # Last points to the last node in the circular linked list

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.last is None:
            self.last = new_node
            self.last.next = self.last  # Points to itself
        else:
            new_node.next = self.last.next
            self.last.next = new_node
        print(f"{data} inserted at the beginning.")
 
    def insert_at_end(self, data): 
        new_node = Node(data)
        if self.last is None:
            self.last = new_node
            self.last.next = self.last
        else:
            new_node.next = self.last.next
            self.last.next = new_node
            self.last = new_node
        print(f"{data} inserted at the end.")

    def delete_from_beginning(self):
        if self.last is None:
            print("The list is empty.")
        elif self.last.next == self.last:
            print(f"{self.last.data} deleted from the list.")
            self.last = None
        else:
            print(f"{self.last.next.data} deleted from the list.")
            self.last.next = self.last.next.next

    def delete_from_end(self):
        if self.last is None:
            print("The list is empty.")
        elif self.last.next == self.last:
            print(f"{self.last.data} deleted from the list.")
            self.last = None
        else:
            temp = self.last.next
            while temp.next != self.last:
                temp = temp.next
            print(f"{self.last.data} deleted from the list.")
            temp.next = self.last.next
            self.last = temp

    def display(self):
        if self.last is None:
            print("The list is empty.")
        else:
            temp = self.last.next
            print("Circular Linked List elements:", end=" ")
            while True:
                print(temp.data, end=" -> ")
                temp = temp.next
                if temp == self.last.next:
                    break
            print("\n")

def menu():
    cll = CircularLinkedList()
    while True:
        print("\n--- Menu ---")
        print("1. Insert at beginning")
        print("2. Insert at end")
        print("3. Delete from beginning")
        print("4. Delete from end")
        print("5. Display")
        print("6. Exit")
        choice = int(input("Enter your choice: "))

        if choice == 1:
            data = int(input("Enter data to insert at beginning: "))
            cll.insert_at_beginning(data)
        elif choice == 2:
            data = int(input("Enter data to insert at end: "))
            cll.insert_at_end(data)
        elif choice == 3:
            cll.delete_from_beginning()
        elif choice == 4:
            cll.delete_from_end()
        elif choice == 5:
            cll.display()
        elif choice == 6:
            print("Exiting...")
            break
        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    menu()
    
